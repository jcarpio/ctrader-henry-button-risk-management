using System;
using System.Linq;
using System.Collections.Generic;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;

namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class ButtonEA : Robot
    {
        private Button buyButtonCYE;
        private Button buyButtonCC;
        private Button sellButtonCYE;
        private Button sellButtonCC;
        private Button trailingStopBuy;
        
        // Indicador de trailing stop para compras
        private bool trailingStopBuyActive = false;
        
        protected override void OnStart()
        {
            // Crear botones de compra
            buyButtonCYE = CreateButton("Buy CYE", 0, 30, 150, 35, "Green");
            buyButtonCC = CreateButton("Buy CC", 0, 80, 150, 35, "Green");
            
            // Crear botones de venta
            sellButtonCYE = CreateButton("Sell CYE", 160, 30, 150, 35, "Red");
            sellButtonCC = CreateButton("Sell CC", 160, 80, 150, 35, "Red");
            
            // Crear botón de trailing stop para compras
            trailingStopBuy = CreateButton("TS Buy", 0, 130, 150, 35, "Green");
            
            // Asignar eventos de clic a los botones
            buyButtonCYE.Click += OnBuyButtonCYEClick;
            buyButtonCC.Click += OnBuyButtonCCClick;
            sellButtonCYE.Click += OnSellButtonCYEClick;
            sellButtonCC.Click += OnSellButtonCCClick;
            trailingStopBuy.Click += OnTrailingStopBuyClick;
            
            // Log de información básica al iniciar
            Print("Robot iniciado - Información del símbolo:");
            Print($"Símbolo: {Symbol.Name}");
            Print($"PipSize: {Symbol.PipSize}");
            Print($"PipValue: {Symbol.PipValue}");
            Print($"Precio Bid actual: {Symbol.Bid}");
            Print($"Precio Ask actual: {Symbol.Ask}");
            Print($"Spread actual: {Symbol.Ask - Symbol.Bid}");
        }
        
        private Button CreateButton(string text, int x, int y, int width, int height, string color)
        {
            var button = new Button
            {
                Text = text,
                BackgroundColor = color,
                ForegroundColor = "White",
                HorizontalAlignment = HorizontalAlignment.Left,
                VerticalAlignment = VerticalAlignment.Top,
                Margin = new Thickness(x, y, 0, 0),
                Width = width,
                Height = height,
                FontSize = 10
            };
            
            Chart.AddControl(button);
            return button;
        }
        
        protected override void OnTick()
        {
            // Ajustar trailing stop si está activo
            if (trailingStopBuyActive)
            {
                ApplyTrailingStop(TradeType.Buy);
            }
        }
        
        private void OnBuyButtonCYEClick(ButtonClickEventArgs args)
        {
            Print("========== EJECUCIÓN BUY CYE ==========");
            // Lógica para el botón de compra CYE
            double spread = Symbol.Ask - Symbol.Bid;
            double amount = 25;
            
            double previousLow = Bars.LowPrices.Last(1);
            // Para compras, el stop debe estar justo por debajo del mínimo
            double stopLossPrice = previousLow;
            
            // Logs para verificar los valores
            Print($"Spread: {spread}");
            Print($"Monto de riesgo: {amount}");
            Print($"Precio Bid actual: {Symbol.Bid}");
            Print($"Precio Ask actual: {Symbol.Ask}");
            Print($"Low de la vela anterior: {previousLow}");
            Print($"Stop Loss calculado (precio): {stopLossPrice}");
            
            // Calcular la distancia del stop loss en pips desde el precio de entrada (Ask para compras)
            double stopLossInPips = (Symbol.Ask - stopLossPrice) / Symbol.PipSize;
            Print($"Distancia en pips hasta SL: {stopLossInPips}");
            
            double lotSize = CalculateLotSize(stopLossPrice, amount, TradeType.Buy);
            Print($"Lot Size calculado: {lotSize}");
            
            try
            {
                // Usar StopLoss en PIPS
                var result = ExecuteMarketOrder(TradeType.Buy, Symbol.Name, lotSize, "Buy CYE", stopLossInPips, null);
                if (result.IsSuccessful)
                {
                    Print($"Orden ejecutada correctamente. Position ID: {result.Position.Id}");
                    Print($"Precio de entrada: {result.Position.EntryPrice}");
                    Print($"Stop Loss: {result.Position.StopLoss}");
                }
                else
                {
                    Print($"Error al ejecutar la orden: {result.Error}");
                }
            }
            catch (Exception ex)
            {
                Print($"Excepción al ejecutar la orden: {ex.Message}");
            }
        }
        
        private void OnSellButtonCYEClick(ButtonClickEventArgs args)
        {
            Print("========== EJECUCIÓN SELL CYE ==========");
            // Lógica para el botón de venta CYE
            double spread = Symbol.Ask - Symbol.Bid;
            double amount = 25;
            
            double previousHigh = Bars.HighPrices.Last(1);
            // Para ventas, el stop debe estar justo por encima del máximo
            double stopLossPrice = previousHigh;
            
            // Logs para verificar los valores
            Print($"Spread: {spread}");
            Print($"Monto de riesgo: {amount}");
            Print($"Precio Bid actual: {Symbol.Bid}");
            Print($"Precio Ask actual: {Symbol.Ask}");
            Print($"High de la vela anterior: {previousHigh}");
            Print($"Stop Loss calculado (precio): {stopLossPrice}");
            
            // Calcular la distancia del stop loss en pips desde el precio de entrada (Bid para ventas)
            double stopLossInPips = (stopLossPrice - Symbol.Bid) / Symbol.PipSize;
            Print($"Distancia en pips hasta SL: {stopLossInPips}");
            
            double lotSize = CalculateLotSize(stopLossPrice, amount, TradeType.Sell);
            Print($"Lot Size calculado: {lotSize}");
            
            try
            {
                // Usar StopLoss en PIPS
                var result = ExecuteMarketOrder(TradeType.Sell, Symbol.Name, lotSize, "Sell CYE", stopLossInPips, null);
                if (result.IsSuccessful)
                {
                    Print($"Orden ejecutada correctamente. Position ID: {result.Position.Id}");
                    Print($"Precio de entrada: {result.Position.EntryPrice}");
                    Print($"Stop Loss: {result.Position.StopLoss}");
                }
                else
                {
                    Print($"Error al ejecutar la orden: {result.Error}");
                }
            }
            catch (Exception ex)
            {
                Print($"Excepción al ejecutar la orden: {ex.Message}");
            }
        }
        
        private void OnBuyButtonCCClick(ButtonClickEventArgs args)
        {
            Print("========== EJECUCIÓN BUY CC ==========");
            // Lógica para el botón de compra CC
            double spread = Symbol.Ask - Symbol.Bid;
            double amount = 25;
            
            double currentLow = Bars.LowPrices.Last(0);
            double previousLow = Bars.LowPrices.Last(1);
            // Para compras CC, el stop debe estar justo por debajo del mínimo entre la vela actual y anterior
            double stopLossPrice = Math.Min(currentLow, previousLow);
            
            // Logs para verificar los valores
            Print($"Spread: {spread}");
            Print($"Monto de riesgo: {amount}");
            Print($"Low de la vela actual: {currentLow}");
            Print($"Low de la vela anterior: {previousLow}");
            Print($"Mínimo seleccionado: {Math.Min(currentLow, previousLow)}");
            Print($"Stop Loss calculado (precio): {stopLossPrice}");
            
            // Calcular la distancia del stop loss en pips desde el precio de entrada (Ask para compras)
            double stopLossInPips = (Symbol.Ask - stopLossPrice) / Symbol.PipSize;
            Print($"Distancia en pips hasta SL: {stopLossInPips}");
            
            double lotSize = CalculateLotSize(stopLossPrice, amount, TradeType.Buy);
            Print($"Lot Size calculado: {lotSize}");
            
            try
            {
                // Usar StopLoss en PIPS
                var result = ExecuteMarketOrder(TradeType.Buy, Symbol.Name, lotSize, "Buy CC", stopLossInPips, null);
                if (result.IsSuccessful)
                {
                    Print($"Orden ejecutada correctamente. Position ID: {result.Position.Id}");
                    Print($"Precio de entrada: {result.Position.EntryPrice}");
                    Print($"Stop Loss: {result.Position.StopLoss}");
                }
                else
                {
                    Print($"Error al ejecutar la orden: {result.Error}");
                }
            }
            catch (Exception ex)
            {
                Print($"Excepción al ejecutar la orden: {ex.Message}");
            }
        }
        
        private void OnSellButtonCCClick(ButtonClickEventArgs args)
        {
            Print("========== EJECUCIÓN SELL CC ==========");
            // Lógica para el botón de venta CC
            double spread = Symbol.Ask - Symbol.Bid;
            double amount = 25;
            
            double currentHigh = Bars.HighPrices.Last(0);
            double previousHigh = Bars.HighPrices.Last(1);
            // Para ventas CC, el stop debe estar justo por encima del máximo entre la vela actual y anterior
            double stopLossPrice = Math.Max(currentHigh, previousHigh);
            
            // Logs para verificar los valores
            Print($"Spread: {spread}");
            Print($"Monto de riesgo: {amount}");
            Print($"High de la vela actual: {currentHigh}");
            Print($"High de la vela anterior: {previousHigh}");
            Print($"Máximo seleccionado: {Math.Max(currentHigh, previousHigh)}");
            Print($"Stop Loss calculado (precio): {stopLossPrice}");
            
            // Calcular la distancia del stop loss en pips desde el precio de entrada (Bid para ventas)
            double stopLossInPips = (stopLossPrice - Symbol.Bid) / Symbol.PipSize;
            Print($"Distancia en pips hasta SL: {stopLossInPips}");
            
            double lotSize = CalculateLotSize(stopLossPrice, amount, TradeType.Sell);
            Print($"Lot Size calculado: {lotSize}");
            
            try
            {
                // Usar StopLoss en PIPS
                var result = ExecuteMarketOrder(TradeType.Sell, Symbol.Name, lotSize, "Sell CC", stopLossInPips, null);
                if (result.IsSuccessful)
                {
                    Print($"Orden ejecutada correctamente. Position ID: {result.Position.Id}");
                    Print($"Precio de entrada: {result.Position.EntryPrice}");
                    Print($"Stop Loss: {result.Position.StopLoss}");
                }
                else
                {
                    Print($"Error al ejecutar la orden: {result.Error}");
                }
            }
            catch (Exception ex)
            {
                Print($"Excepción al ejecutar la orden: {ex.Message}");
            }
        }
        
        private void OnTrailingStopBuyClick(ButtonClickEventArgs args)
        {
            // Activar trailing stop para compras
            trailingStopBuyActive = !trailingStopBuyActive;
            Print($"Trailing Stop Buy: {(trailingStopBuyActive ? "ACTIVADO" : "DESACTIVADO")}");
            
            // Actualizar color del botón
            trailingStopBuy.BackgroundColor = trailingStopBuyActive ? "Blue" : "Green";
        }
        
        private double CalculateLotSize(double stopLossPrice, double riskAmount, TradeType tradeType)
        {
            Print("---------- CÁLCULO DE LOTAJE ----------");
            // Usar el precio correcto según el tipo de operación
            double entryPrice = (tradeType == TradeType.Buy) ? Symbol.Ask : Symbol.Bid;
            double pipsRisk = Math.Abs(entryPrice - stopLossPrice) / Symbol.PipSize;
            double pipValue = Symbol.PipValue;
            
            // Logs detallados del cálculo
            Print($"Tipo de operación: {tradeType}");
            Print($"Precio de entrada ({(tradeType == TradeType.Buy ? "Ask" : "Bid")}): {entryPrice}");
            Print($"Precio de Stop Loss: {stopLossPrice}");
            Print($"Diferencia en precio: {Math.Abs(entryPrice - stopLossPrice)}");
            Print($"PipSize: {Symbol.PipSize}");
            Print($"Riesgo en pips: {pipsRisk}");
            Print($"Valor del pip: {pipValue}");
            Print($"Monto de riesgo: {riskAmount}");
            
            // Verificar si hay un posible error de división por cero
            if (pipsRisk * pipValue == 0)
            {
                Print("¡ADVERTENCIA! División por cero detectada en el cálculo del lotaje");
                return 0.01; // Valor mínimo por defecto
            }
            
            // Calcular el lotaje basado en el riesgo
            double lotSize = riskAmount / (pipsRisk * pipValue);
            Print($"Lotaje calculado (sin redondear): {lotSize}");
            
            // Verificar si el lotaje es razonable
            if (lotSize <= 0 || double.IsNaN(lotSize) || double.IsInfinity(lotSize))
            {
                Print("¡ERROR! Lotaje calculado no válido");
                return 0.01; // Valor mínimo por defecto
            }
            
            // Reducir el lotaje un 10% para compensar posibles desajustes
            lotSize = lotSize * 0.9;
            Print($"Lotaje ajustado (-10%): {lotSize}");
            
            // Normalizar el lotaje a 2 decimales
            double roundedLotSize = Math.Round(lotSize, 2);
            Print($"Lotaje final (redondeado): {roundedLotSize}");
            
            return roundedLotSize;
        }
        
        private void ApplyTrailingStop(TradeType tradeType)
        {
            foreach (var position in Positions.FindAll("ButtonEA", Symbol.Name, tradeType))
            {
                UpdateTrailingStop(position, tradeType);
            }
        }
        
        private void UpdateTrailingStop(Position position, TradeType tradeType)
        {
            if (tradeType == TradeType.Buy)
            {
                // Trailing stop para posición de compra
                double minPrice = Bars.LowPrices.Last(1); // Low de la vela anterior
                double newStopLossPrice = minPrice; // Stop loss exactamente en el mínimo
                
                Print($"Trailing Stop - Posición ID: {position.Id}");
                Print($"Stop Loss actual (precio): {position.StopLoss}");
                Print($"Nuevo Stop Loss posible (precio): {newStopLossPrice}");
                
                // Obtener el precio actual del stop loss (con conversión de double? a double)
                double currentStopLossPrice = position.StopLoss.HasValue ? position.StopLoss.Value : 0;
                
                if (newStopLossPrice > currentStopLossPrice)
                {
                    Print($"Actualizando Stop Loss de {currentStopLossPrice} a {newStopLossPrice}");
                    
                    // Calcular la distancia en pips desde el precio de entrada actual
                    double newStopLossInPips = (position.EntryPrice - newStopLossPrice) / Symbol.PipSize;
                    Print($"Nueva distancia en pips para SL: {newStopLossInPips}");
                    
                    // Usar ClosePosition para cerrar y volver a abrir con nuevo SL
                    var volume = position.VolumeInUnits;
                    var label = position.Label;
                    var takeProfit = position.TakeProfit;
                    
                    // Cerrar la posición actual
                    ClosePosition(position);
                    Print($"Posición cerrada para actualizar Stop Loss");
                    
                    // Abrir una nueva con el mismo volumen pero nuevo SL (en pips)
                    var result = ExecuteMarketOrder(TradeType.Buy, Symbol.Name, volume, label, newStopLossInPips, takeProfit);
                    if (result.IsSuccessful)
                    {
                        Print($"Nueva posición abierta con Stop Loss actualizado. ID: {result.Position.Id}");
                        Print($"Nuevo precio de entrada: {result.Position.EntryPrice}");
                        Print($"Nuevo Stop Loss: {result.Position.StopLoss}");
                    }
                    else
                    {
                        Print($"Error al reabrir posición: {result.Error}");
                    }
                }
                else
                {
                    Print("No es necesario actualizar el Stop Loss");
                }
            }
        }
    }
}
